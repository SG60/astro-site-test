<button
  class="theme-toggle"
  id="theme-toggle"
  title="Toggles light & dark"
  aria-label="auto"
  aria-live="polite"
>
  <svg
    class="sun-and-moon"
    aria-hidden="true"
    width="24"
    height="24"
    viewBox="0 0 24 24"
  >
    <circle
      class="sun"
      cx="12"
      cy="12"
      r="6"
      mask="url(#moon-mask)"
      fill="currentColor"></circle>
    <g class="sun-beams" stroke="currentColor">
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </g>
    <mask class="moon" id="moon-mask">
      <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
      <circle cx="24" cy="10" r="6" fill="black"></circle>
    </mask>
  </svg>
</button>

<script>
  import {
    getColorPreference,
    setColorPreference,
  } from "./themeSwitchTools.ts";

  // Get the current theme from localStorage
  document.querySelector("#theme-toggle").addEventListener("click", () => {
    const colorPreference = getColorPreference();
    console.log("colorPreference", colorPreference);
    if (colorPreference === "dark") {
      setColorPreference("light");
    } else {
      setColorPreference("dark");
    }
  });

  // Stay synchronized with system theme
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", ({ matches: isDark }) => {
      setColorPreference(isDark ? "dark" : "light");
    });
</script>

<style lang="scss">
  .theme-toggle {
    --size: 1.5rem;
    --icon-fill: rgb(143, 138, 138);
    --icon-fill-hover: rgb(0, 0, 0);
    :global(.dark) & {
      --icon-fill: rgb(143, 138, 138);
      --icon-fill-hover: rgb(255 255 255);
    }

    border: none;
    padding: 0;

    inline-size: var(--size);
    block-size: var(--size);
    aspect-ratio: 1;
    border-radius: 50%;

    cursor: pointer;
    touch-action: manipulation;
    outline-offset: 5px;

    & > svg {
      inline-size: 100%;
      block-size: 100%;
      stroke-linecap: round;
    }

    @media (hover: none) {
      --size: 2.2rem;
    }
  }

  .sun-and-moon {
    & > :is(.moon, .sun, .sun-beams) {
      transform-origin: center center;
    }

    & > :is(.moon, .sun) {
      fill: var(--icon-fill);

      .theme-toggle:is(:hover, :focus-visible) > & {
        fill: var(--icon-fill-hover);
      }
    }

    & > .sun-beams {
      stroke: var(--icon-fill);
      stroke-width: 2px;

      .theme-toggle:is(:hover, :focus-visible) & {
        stroke: var(--icon-fill-hover);
      }
    }

    :global(.dark) & {
      & > .sun {
        transform: scale(1.75);
      }

      & > .sun-beams {
        opacity: 0;
      }

      & > .moon > circle {
        transform: translateX(-7px);

        @supports (cx: 1) {
          transform: translateX(0);
          cx: 17;
        }
      }
    }

    @media (prefers-reduced-motion: no-preference) {
      & > {
        .sun {
          transition: transform 0.5s ease-in-out;
        }

        .sun-beams {
          transition: stroke 0.5s ease-in-out, opacity 0.5s ease-in-out;
        }
      }
      :global(.dark) & > {
        .sun {
          transform: scale(1.75);
          transition-timing-function: ease-in-out;
          transition-duration: 0.5s;
        }

        .sun-beams {
          transform: rotateZ(-25deg);
          transition-duration: 0.15s;
        }
      }
      & > .moon > circle {
        transform: translateX(-40px);
        transition: transform 0.25s ease-in-out;

        @supports (cx: 1) {
          transform: translateX(0);
          cx: 30;
          transition: cx 0.25s ease-in-out;
        }

        :global(.dark) & {
          transition-delay: 0.25s;
          transition-duration: 0.5s;
        }
      }
    }
  }
</style>
